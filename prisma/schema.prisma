generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cycle {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  vision    String?
  weeks     Week[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Week {
  id          Int      @id @default(autoincrement())
  weekNumber  Int
  vision      String?
  reflection  String?
  isExpanded  Boolean  @default(true)
  cycle       Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  cycleId     Int
  goals       Goal[]
  keyResults  KeyResult[]
  days        Day[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([cycleId, weekNumber])
}

model Goal {
  id        Int      @id @default(autoincrement())
  title     String
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KeyResult {
  id        Int      @id @default(autoincrement())
  title     String
  target    Float
  current   Float    @default(0)
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Day {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     String?
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId    Int
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([weekId, date])
}

model Task {
  id            Int       @id @default(autoincrement())
  title         String
  completed     Boolean   @default(false)
  timeBlock     String    // 'strategic', 'buffer', 'break'
  scheduledTime String?   // HH:mm format
  day           Day       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Habit {
  id          Int           @id @default(autoincrement())
  title       String
  category    String        @default("personal")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  progress    DayProgress[]
}

model DayProgress {
  id        Int      @id @default(autoincrement())
  date      DateTime
  isChecked Boolean  @default(false)
  habitId   Int
  habit     Habit    @relation(fields: [habitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, date])
}

model Circle {
  id        Int      @id @default(autoincrement())
  title     String
  maxClicks Int      @default(5)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  resetToken      String?
  resetTokenExpiry DateTime?
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 
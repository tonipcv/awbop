generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cycle {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  vision    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeks     Week[]
}

model Week {
  id         String      @id @default(cuid())
  weekNumber Int
  vision     String?
  reflection String?
  isExpanded Boolean     @default(true)
  cycleId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  days       Day[]
  goals      Goal[]
  keyResults KeyResult[]
  cycle      Cycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([cycleId, weekNumber])
}

model Goal {
  id        String   @id @default(cuid())
  title     String
  weekId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model KeyResult {
  id        String   @id @default(cuid())
  title     String
  target    Float
  current   Float    @default(0)
  weekId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model Day {
  id        String   @id @default(cuid())
  date      DateTime
  notes     String?
  weekId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([weekId, date])
}

model Task {
  id            String   @id @default(cuid())
  title         String
  completed     Boolean  @default(false)
  timeBlock     String
  scheduledTime String?
  dayId         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  day           Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model EisenhowerTask {
  id          String   @id @default(cuid())
  userId      String
  title       String
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  importance  Int      @default(4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Habit {
  id        String        @id @default(cuid())
  title     String
  category  String        @default("personal")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  userId    String
  progress  DayProgress[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DayProgress {
  id        String   @id @default(cuid())
  date      DateTime
  isChecked Boolean  @default(false)
  habitId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id])

  @@unique([habitId, date])
}

model Circle {
  id        String   @id @default(cuid())
  title     String
  maxClicks Int      @default(5)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                                               String                   @id @default(cuid())
  email                                                            String                   @unique
  name                                                             String?
  image                                                            String?
  role                                                             String                   @default("PATIENT")
  isActive                                                         Boolean                  @default(true)
  createdAt                                                        DateTime                 @default(now())
  updatedAt                                                        DateTime                 @default(now())
  emailVerified                                                    DateTime?
  password                                                         String?
  resetToken                                                       String?
  resetTokenExpiry                                                 DateTime?
  verificationCode                                                 String?
  verificationCodeExpiry                                           DateTime?
  doctorId                                                         String?
  referralCode                                                     String?                  @unique
  phone                                                            String?
  birthDate                                                        DateTime?                @db.Date
  gender                                                           String?
  address                                                          String?
  emergencyContact                                                 String?
  emergencyPhone                                                   String?
  medicalHistory                                                   String?
  allergies                                                        String?
  medications                                                      String?
  notes                                                            String?
  accounts                                                         Account[]
  checkpoints                                                      Checkpoint[]
  circles                                                          Circle[]
  cycles                                                           Cycle[]
  eisenhowerTasks                                                  EisenhowerTask[]
  habits                                                           Habit[]
  pomodoroStars                                                    PomodoroStar[]
  protocolProgress                                                 ProtocolDayProgress[]
  sessions                                                         Session[]
  thoughts                                                         Thought[]
  doctor                                                           User?                    @relation("DoctorPatient", fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients                                                         User[]                   @relation("DoctorPatient")
  assignedProtocols                                                UserProtocol[]
  clinicMemberships                                                ClinicMember[]
  ownedClinics                                                     Clinic[]                 @relation("ClinicOwner")
  consultationForm                                                 ConsultationForm?        @relation("DoctorConsultationForms")
  consultation_submissions_consultation_submissions_doctorIdToUser ConsultationSubmission[] @relation("consultation_submissions_doctorIdToUser")
  convertedConsultations                                           ConsultationSubmission[] @relation("ConvertedConsultations")
  createdCourses                                                   Course[]                 @relation("DoctorCourses")
  createdProducts                                                  products[]               @relation("DoctorProducts")
  subscription                                                     DoctorSubscription?      @relation("DoctorSubscription")
  leads                                                            leads[]
  createdProtocols                                                 Protocol[]               @relation("DoctorProtocols")
  credits                                                          ReferralCredit[]         @relation("UserCredits")
  formSettings                                                     ReferralFormSettings?    @relation("DoctorFormSettings")
  convertedFromLead                                                ReferralLead[]           @relation("ConvertedFromLead")
  leadsReceived                                                    ReferralLead[]           @relation("DoctorLeads")
  referral_leads_referral_leads_referrerIdToUser                   ReferralLead[]           @relation("referral_leads_referrerIdToUser")
  offeredRewards                                                   ReferralReward[]         @relation("DoctorRewards")
  referrals_referrals_doctorIdToUser                               referrals[]              @relation("referrals_doctorIdToUser")
  referrals_referrals_patientIdToUser                              referrals[]              @relation("referrals_patientIdToUser")
  redemptions                                                      RewardRedemption[]       @relation("UserRedemptions")
  subscriptions                                                    subscriptions?
  assignedCourses                                                  UserCourse[]
  lessonProgress                                                   UserLesson[]
}

model Protocol {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  doctorId            String
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  duration            Int?                  @default(30)
  modalTitle          String?
  modalVideoUrl       String?
  modalDescription    String?
  modalButtonText     String?               @default("Saber mais")
  modalButtonUrl      String?
  showDoctorInfo      Boolean?              @default(false)
  isTemplate          Boolean?              @default(false)
  days                ProtocolDay[]
  ProtocolDayProgress ProtocolDayProgress[]
  assignments         UserProtocol[]
  protocol_products   protocol_products[]
  doctor              User                  @relation("DoctorProtocols", fields: [doctorId], references: [id])
  referrals           referrals[]

  @@map("protocols")
}

model ProtocolDay {
  id          String            @id @default(cuid())
  protocolId  String
  dayNumber   Int
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  protocol    Protocol          @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  sessions    ProtocolSession[]
}

model ProtocolSession {
  id            String         @id @default(cuid())
  protocolDayId String
  sessionNumber Int
  title         String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  protocolDay   ProtocolDay    @relation(fields: [protocolDayId], references: [id], onDelete: Cascade)
  tasks         ProtocolTask[]
}

model ProtocolTask {
  id                String                @id @default(cuid())
  protocolSessionId String
  title             String
  description       String?
  type              String                @default("task")
  duration          Int?
  orderIndex        Int                   @default(0)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt
  ProtocolContent   ProtocolContent[]
  progress          ProtocolDayProgress[]
  protocolSession   ProtocolSession       @relation(fields: [protocolSessionId], references: [id], onDelete: Cascade)
}

model ProtocolContent {
  id             String       @id @default(cuid())
  protocolTaskId String
  type           String
  content        String
  orderIndex     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  ProtocolTask   ProtocolTask @relation(fields: [protocolTaskId], references: [id], onDelete: Cascade)
}

model UserProtocol {
  id         String    @id @default(cuid())
  userId     String
  protocolId String
  startDate  DateTime  @default(now())
  endDate    DateTime?
  status     String    @default("ACTIVE")
  currentDay Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  isActive   Boolean?  @default(true)
  protocol   Protocol  @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, protocolId])
}

model ProtocolDayProgress {
  id              String        @id @default(cuid())
  userId          String
  protocolId      String
  dayNumber       Int
  completed       Boolean       @default(false)
  completedAt     DateTime?
  protocolTaskId  String?
  date            DateTime?
  isCompleted     Boolean       @default(false)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  protocols       Protocol      @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  protocolTask    ProtocolTask? @relation(fields: [protocolTaskId], references: [id], onDelete: Cascade)

  @@unique([userId, protocolId, dayNumber])
  @@unique([userId, protocolTaskId, date])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Checkpoint {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Thought {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PomodoroStar {
  id       String   @id @default(cuid())
  userId   String
  earnedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id(map: "Course_pkey") @default(cuid())
  title       String
  description String?
  thumbnail   String?
  isPublished Boolean      @default(false)
  price       Decimal?     @db.Decimal(10, 2)
  doctorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  doctor      User         @relation("DoctorCourses", fields: [doctorId], references: [id], onDelete: Cascade, map: "Course_doctorId_fkey")
  modules     Module[]
  assignments UserCourse[]

  @@map("courses")
}

model Module {
  id          String   @id(map: "Module_pkey") @default(cuid())
  title       String
  description String?
  orderIndex  Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "Module_courseId_fkey")

  @@map("modules")
}

model Lesson {
  id          String       @id(map: "Lesson_pkey") @default(cuid())
  title       String
  content     String?
  videoUrl    String?
  duration    Int?
  orderIndex  Int
  moduleId    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade, map: "Lesson_moduleId_fkey")
  progress    UserLesson[]

  @@map("lessons")
}

model UserCourse {
  id          String    @id(map: "UserCourse_pkey") @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Int       @default(0)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "UserCourse_courseId_fkey")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserCourse_userId_fkey")

  @@unique([userId, courseId], map: "UserCourse_userId_courseId_key")
  @@map("user_courses")
}

model UserLesson {
  id          String    @id(map: "UserLesson_pkey") @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime?
  watchTime   Int       @default(0)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade, map: "UserLesson_lessonId_fkey")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserLesson_userId_fkey")

  @@unique([userId, lessonId], map: "UserLesson_userId_lessonId_key")
  @@map("user_lessons")
}

model products {
  id                String              @id
  name              String
  description       String?
  price             Decimal             @db.Decimal(10, 2)
  category          String
  isActive          Boolean             @default(true)
  doctorId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  doctor            User                @relation("DoctorProducts", fields: [doctorId], references: [id], onDelete: Cascade)
  protocol_products protocol_products[]

  @@index([doctorId])
}

model protocol_products {
  id           String   @id
  protocolId   String
  productId    String
  quantity     Int      @default(1)
  instructions String?
  createdAt    DateTime @default(now())
  products     products @relation(fields: [productId], references: [id], onDelete: Cascade)
  protocols    Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([protocolId, productId])
}

model SubscriptionPlan {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  price                Float
  billingCycle         String               @default("MONTHLY")
  maxDoctors           Int                  @default(1)
  features             String?
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt
  maxPatients          Int?                 @default(10)
  maxProtocols         Int?                 @default(5)
  maxCourses           Int?                 @default(3)
  maxProducts          Int?                 @default(20)
  isDefault            Boolean?             @default(false)
  trialDays            Int?                 @default(7)
  clinicSubscriptions  ClinicSubscription[] @relation("ClinicSubscriptions")
  subscriptions        DoctorSubscription[]
  subscriptions_legacy subscriptions[]

  @@map("subscription_plans")
}

model DoctorSubscription {
  id              String           @id(map: "DoctorSubscription_pkey") @default(cuid())
  doctorId        String           @unique(map: "DoctorSubscription_userId_key")
  planId          String
  status          String           @default("TRIAL")
  startDate       DateTime         @default(now())
  endDate         DateTime?
  trialEndDate    DateTime?
  autoRenew       Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  lastPaymentDate DateTime?        @db.Timestamp(6)
  nextPaymentDate DateTime?        @db.Timestamp(6)
  plan            SubscriptionPlan @relation(fields: [planId], references: [id], map: "DoctorSubscription_planId_fkey")
  doctor          User             @relation("DoctorSubscription", fields: [doctorId], references: [id], onDelete: Cascade, map: "DoctorSubscription_userId_fkey")

  @@map("doctor_subscriptions")
}

model SystemMetrics {
  id                  String   @id(map: "SystemMetrics_pkey") @default(cuid())
  date                DateTime @unique(map: "SystemMetrics_date_key")
  totalUsers          Int      @default(0)
  activeUsers         Int      @default(0)
  totalDoctors        Int      @default(0)
  totalPatients       Int      @default(0)
  totalReferrals      Int      @default(0)
  totalProtocols      Int      @default(0)
  totalCourses        Int      @default(0)
  activeSubscriptions Int      @default(0)
  trialSubscriptions  Int      @default(0)
  totalRevenue        Decimal  @default(0) @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  @@map("system_metrics")
}

model Clinic {
  id           String              @id @default(cuid())
  name         String
  description  String?
  ownerId      String
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  email        String?
  phone        String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  website      String?
  logo         String?
  members      ClinicMember[]
  subscription ClinicSubscription?
  owner        User                @relation("ClinicOwner", fields: [ownerId], references: [id])

  @@map("clinics")
}

model ClinicMember {
  id       String   @id @default(cuid())
  clinicId String
  userId   String
  role     String   @default("DOCTOR")
  isActive Boolean  @default(true)
  joinedAt DateTime @default(now())
  clinic   Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clinicId, userId])
  @@map("clinic_members")
}

model ClinicSubscription {
  id           String           @id @default(cuid())
  clinicId     String           @unique
  planId       String
  status       String           @default("TRIAL")
  maxDoctors   Int              @default(1)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  trialEndDate DateTime?
  autoRenew    Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  clinic       Clinic           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  plan         SubscriptionPlan @relation("ClinicSubscriptions", fields: [planId], references: [id])

  @@map("clinic_subscriptions")
}

model ReferralLead {
  id                                   String           @id(map: "ReferralLead_pkey") @default(cuid())
  name                                 String
  email                                String
  phone                                String?
  message                              String?
  status                               String           @default("NEW")
  source                               String?
  referrerId                           String?
  doctorId                             String?
  convertedUserId                      String?
  convertedAt                          DateTime?
  creditValue                          Decimal          @default(0) @db.Decimal(10, 2)
  creditAwarded                        Boolean          @default(false)
  creditAwardedAt                      DateTime?
  notes                                String?
  followUpDate                         DateTime?
  lastContactDate                      DateTime?
  priority                             String           @default("MEDIUM")
  tags                                 String[]
  customFields                         Json?
  referralCode                         String?          @unique
  createdAt                            DateTime         @default(now())
  updatedAt                            DateTime         @default(now()) @updatedAt
  referral_credits                     ReferralCredit[]
  convertedUser                        User?            @relation("ConvertedFromLead", fields: [convertedUserId], references: [id], map: "ReferralLead_convertedUserId_fkey")
  doctor                               User?            @relation("DoctorLeads", fields: [doctorId], references: [id], map: "ReferralLead_doctorId_fkey")
  User_referral_leads_referrerIdToUser User?            @relation("referral_leads_referrerIdToUser", fields: [referrerId], references: [id], map: "ReferralLead_referrerId_fkey")

  @@unique([email, doctorId], map: "ReferralLead_email_doctorId_key")
  @@index([doctorId], map: "ReferralLead_doctorId_idx")
  @@index([referrerId], map: "ReferralLead_referrerId_idx")
  @@index([status], map: "ReferralLead_status_idx")
  @@map("referral_leads")
}

model ReferralCredit {
  id              String        @id(map: "ReferralCredit_pkey") @default(cuid())
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  type            String        @default("REFERRAL")
  description     String?
  referralLeadId  String?
  expiresAt       DateTime?
  isUsed          Boolean       @default(false)
  usedAt          DateTime?
  usedForRewardId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  referral_leads  ReferralLead? @relation(fields: [referralLeadId], references: [id], map: "ReferralCredit_referralLeadId_fkey")
  user            User          @relation("UserCredits", fields: [userId], references: [id], onDelete: Cascade, map: "ReferralCredit_userId_fkey")

  @@index([isUsed], map: "ReferralCredit_isUsed_idx")
  @@index([userId], map: "ReferralCredit_userId_idx")
  @@map("referral_credits")
}

model ReferralReward {
  id                 String             @id(map: "ReferralReward_pkey") @default(cuid())
  title              String
  description        String?
  type               String             @default("DISCOUNT")
  value              Decimal            @db.Decimal(10, 2)
  costInCredits      Decimal            @db.Decimal(10, 2)
  isActive           Boolean            @default(true)
  validUntil         DateTime?
  maxRedemptions     Int?
  currentRedemptions Int                @default(0)
  doctorId           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  doctor             User               @relation("DoctorRewards", fields: [doctorId], references: [id], onDelete: Cascade, map: "ReferralReward_doctorId_fkey")
  redemptions        RewardRedemption[]

  @@map("referral_rewards")
}

model RewardRedemption {
  id          String         @id(map: "RewardRedemption_pkey") @default(cuid())
  userId      String
  rewardId    String
  creditsUsed Decimal        @db.Decimal(10, 2)
  status      String         @default("PENDING")
  redeemedAt  DateTime       @default(now())
  fulfilledAt DateTime?
  notes       String?
  reward      ReferralReward @relation(fields: [rewardId], references: [id], onDelete: Cascade, map: "RewardRedemption_rewardId_fkey")
  user        User           @relation("UserRedemptions", fields: [userId], references: [id], onDelete: Cascade, map: "RewardRedemption_userId_fkey")

  @@index([userId], map: "RewardRedemption_userId_idx")
  @@map("reward_redemptions")
}

model ReferralFormSettings {
  id                 String   @id(map: "ReferralFormSettings_pkey") @default(cuid())
  doctorId           String   @unique(map: "ReferralFormSettings_doctorId_key")
  title              String   @default("Indique um amigo")
  description        String?
  thankYouMessage    String?
  customFields       Json?
  isActive           Boolean  @default(true)
  allowAnonymous     Boolean  @default(false)
  requirePhone       Boolean  @default(false)
  requireMessage     Boolean  @default(false)
  autoAssignToDoctor Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  doctor             User     @relation("DoctorFormSettings", fields: [doctorId], references: [id], onDelete: Cascade, map: "ReferralFormSettings_doctorId_fkey")

  @@map("referral_form_settings")
}

model ConsultationForm {
  id                 String                   @id(map: "ConsultationForm_pkey") @default(cuid())
  doctorId           String                   @unique(map: "ConsultationForm_doctorId_key")
  title              String                   @default("Formulário de Consulta")
  description        String?
  fields             Json                     @default("[]")
  isActive           Boolean                  @default(true)
  allowAnonymous     Boolean                  @default(false)
  requireAuth        Boolean                  @default(false)
  autoCreatePatient  Boolean                  @default(true)
  emailNotifications Boolean                  @default(true)
  smsNotifications   Boolean                  @default(false)
  thankYouMessage    String?
  redirectUrl        String?
  customCss          String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @default(now()) @updatedAt
  doctor             User                     @relation("DoctorConsultationForms", fields: [doctorId], references: [id], onDelete: Cascade, map: "ConsultationForm_doctorId_fkey")
  submissions        ConsultationSubmission[]

  @@map("consultation_forms")
}

model ConsultationSubmission {
  id                                           String           @id(map: "ConsultationSubmission_pkey") @default(cuid())
  formId                                       String
  patientId                                    String?
  doctorId                                     String
  submissionData                               Json
  status                                       String           @default("NEW")
  priority                                     String           @default("MEDIUM")
  notes                                        String?
  followUpDate                                 DateTime?
  lastContactDate                              DateTime?
  convertedToPatient                           Boolean          @default(false)
  convertedAt                                  DateTime?
  createdAt                                    DateTime         @default(now())
  updatedAt                                    DateTime         @default(now()) @updatedAt
  User_consultation_submissions_doctorIdToUser User             @relation("consultation_submissions_doctorIdToUser", fields: [doctorId], references: [id], onDelete: Cascade, map: "ConsultationSubmission_doctorId_fkey")
  form                                         ConsultationForm @relation(fields: [formId], references: [id], onDelete: Cascade, map: "ConsultationSubmission_formId_fkey")
  patient                                      User?            @relation("ConvertedConsultations", fields: [patientId], references: [id], map: "ConsultationSubmission_patientId_fkey")

  @@index([doctorId], map: "ConsultationSubmission_doctorId_idx")
  @@index([formId], map: "ConsultationSubmission_formId_idx")
  @@map("consultation_submissions")
}

model leads {
  id         String   @id
  name       String
  email      String
  phone      String?
  message    String?
  status     String   @default("NEW")
  source     String?
  referrerId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  User       User?    @relation(fields: [referrerId], references: [id])
}

model referrals {
  id                             String    @id
  patientId                      String
  doctorId                       String
  protocolId                     String?
  status                         String    @default("PENDING")
  notes                          String?
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @default(now())
  User_referrals_doctorIdToUser  User      @relation("referrals_doctorIdToUser", fields: [doctorId], references: [id])
  User_referrals_patientIdToUser User      @relation("referrals_patientIdToUser", fields: [patientId], references: [id])
  protocols                      Protocol? @relation(fields: [protocolId], references: [id])
}

model subscriptions {
  id                 String           @id
  userId             String           @unique
  planId             String
  status             String           @default("TRIAL")
  startDate          DateTime         @default(now())
  endDate            DateTime?
  trialEndDate       DateTime?
  autoRenew          Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  subscription_plans SubscriptionPlan @relation(fields: [planId], references: [id])
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

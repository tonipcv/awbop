const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

function generateReferralCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function addReferralCodeSafely() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o segura do sistema de c√≥digos de indica√ß√£o...');
    
    // 1. Verificar se a coluna j√° existe
    console.log('üìã Verificando estrutura atual da tabela User...');
    const tableInfo = await prisma.$queryRaw`PRAGMA table_info(User)`;
    const hasReferralCode = tableInfo.some(column => column.name === 'referralCode');
    
    if (hasReferralCode) {
      console.log('‚úÖ Campo referralCode j√° existe!');
    } else {
      console.log('‚ûï Adicionando campo referralCode √† tabela User...');
      await prisma.$executeRaw`ALTER TABLE User ADD COLUMN referralCode TEXT`;
      console.log('‚úÖ Campo referralCode adicionado com sucesso!');
    }
    
    // 2. Buscar usu√°rios sem c√≥digo de indica√ß√£o
    console.log('üîç Buscando usu√°rios sem c√≥digo de indica√ß√£o...');
    const users = await prisma.$queryRaw`
      SELECT id, name, email, role 
      FROM User 
      WHERE referralCode IS NULL
    `;
    
    console.log(`üìä Encontrados ${users.length} usu√°rios sem c√≥digo de indica√ß√£o`);
    
    // 3. Gerar c√≥digos √∫nicos para cada usu√°rio
    for (const user of users) {
      let referralCode;
      let isUnique = false;
      let attempts = 0;
      
      // Gerar c√≥digo √∫nico
      while (!isUnique && attempts < 10) {
        referralCode = generateReferralCode();
        
        const existing = await prisma.$queryRaw`
          SELECT id FROM User WHERE referralCode = ${referralCode}
        `;
        
        if (existing.length === 0) {
          isUnique = true;
        }
        attempts++;
      }
      
      if (isUnique) {
        await prisma.$executeRaw`
          UPDATE User 
          SET referralCode = ${referralCode} 
          WHERE id = ${user.id}
        `;
        
        console.log(`‚úÖ ${user.name || user.email} (${user.role}): ${referralCode}`);
      } else {
        console.log(`‚ùå Falha ao gerar c√≥digo √∫nico para ${user.name || user.email}`);
      }
    }
    
    // 4. Criar √≠ndice √∫nico para referralCode
    console.log('üîß Criando √≠ndice √∫nico para referralCode...');
    try {
      await prisma.$executeRaw`CREATE UNIQUE INDEX User_referralCode_key ON User(referralCode)`;
      console.log('‚úÖ √çndice √∫nico criado com sucesso!');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚úÖ √çndice √∫nico j√° existe!');
      } else {
        console.log('‚ö†Ô∏è Erro ao criar √≠ndice:', error.message);
      }
    }
    
    // 5. Verificar se precisamos atualizar a tabela ReferralLead
    console.log('üîç Verificando estrutura da tabela ReferralLead...');
    try {
      const referralLeadInfo = await prisma.$queryRaw`PRAGMA table_info(referral_leads)`;
      const hasReferrerCode = referralLeadInfo.some(column => column.name === 'referrerCode');
      
      if (!hasReferrerCode) {
        console.log('‚ûï Adicionando campo referrerCode √† tabela referral_leads...');
        await prisma.$executeRaw`ALTER TABLE referral_leads ADD COLUMN referrerCode TEXT`;
        
        // Migrar dados existentes (se houver)
        const existingLeads = await prisma.$queryRaw`
          SELECT id, referrerId FROM referral_leads WHERE referrerCode IS NULL
        `;
        
        for (const lead of existingLeads) {
          const referrer = await prisma.$queryRaw`
            SELECT referralCode FROM User WHERE id = ${lead.referrerId}
          `;
          
          if (referrer.length > 0 && referrer[0].referralCode) {
            await prisma.$executeRaw`
              UPDATE referral_leads 
              SET referrerCode = ${referrer[0].referralCode} 
              WHERE id = ${lead.id}
            `;
          }
        }
        
        console.log('‚úÖ Campo referrerCode adicionado e dados migrados!');
      } else {
        console.log('‚úÖ Campo referrerCode j√° existe!');
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela referral_leads n√£o existe ainda (ser√° criada quando necess√°rio)');
    }
    
    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('üìã Resumo:');
    console.log(`   - C√≥digos gerados para ${users.length} usu√°rios`);
    console.log('   - √çndice √∫nico criado');
    console.log('   - Sistema pronto para usar c√≥digos de indica√ß√£o!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addReferralCodeSafely(); 
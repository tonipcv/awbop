const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createProtocolsAndCourses() {
  try {
    console.log('üîç Verificando pacientes...');
    
    // Buscar todos os pacientes
    const patients = await prisma.user.findMany({
      where: { role: 'PATIENT' },
      include: {
        doctor: {
          select: { id: true, name: true, email: true }
        }
      }
    });
    
    console.log(`üìä Total de pacientes: ${patients.length}`);
    
    if (patients.length === 0) {
      console.log('‚ùå Nenhum paciente encontrado');
      return;
    }
    
    // Buscar todos os m√©dicos para criar protocolos variados
    const doctors = await prisma.user.findMany({
      where: { role: 'DOCTOR' },
      select: { id: true, name: true }
    });
    
    console.log(`üë®‚Äç‚öïÔ∏è Total de m√©dicos: ${doctors.length}`);
    
    // Protocolos base para criar
    const protocolTemplates = [
      {
        name: 'Protocolo de Hipertens√£o',
        description: 'Protocolo completo para controle da press√£o arterial',
        days: [
          { dayNumber: 1, tasks: [
            { title: 'Medi√ß√£o da Press√£o', description: 'Medir press√£o arterial 2x ao dia', order: 1 },
            { title: 'Medica√ß√£o', description: 'Tomar medicamento conforme prescri√ß√£o', order: 2 }
          ]},
          { dayNumber: 2, tasks: [
            { title: 'Exerc√≠cios', description: 'Caminhada de 30 minutos', order: 1 },
            { title: 'Dieta', description: 'Reduzir sal e gorduras', order: 2 }
          ]}
        ]
      },
      {
        name: 'Protocolo de Diabetes',
        description: 'Controle glic√™mico e cuidados com diabetes',
        days: [
          { dayNumber: 1, tasks: [
            { title: 'Glicemia', description: 'Verificar glicose 3x ao dia', order: 1 },
            { title: 'Insulina', description: 'Aplicar insulina nos hor√°rios corretos', order: 2 }
          ]},
          { dayNumber: 2, tasks: [
            { title: 'Alimenta√ß√£o', description: 'Seguir dieta com baixo √≠ndice glic√™mico', order: 1 },
            { title: 'Exerc√≠cios', description: 'Atividade f√≠sica regular', order: 2 }
          ]}
        ]
      },
      {
        name: 'Protocolo P√≥s-Cir√∫rgico',
        description: 'Cuidados no p√≥s-operat√≥rio',
        days: [
          { dayNumber: 1, tasks: [
            { title: 'Curativo', description: 'Trocar curativo diariamente', order: 1 },
            { title: 'Medica√ß√£o', description: 'Antibi√≥tico e analg√©sico conforme prescri√ß√£o', order: 2 }
          ]},
          { dayNumber: 2, tasks: [
            { title: 'Repouso', description: 'Evitar esfor√ßos f√≠sicos', order: 1 },
            { title: 'Retorno', description: 'Agendar consulta de retorno', order: 2 }
          ]}
        ]
      },
      {
        name: 'Protocolo de Fisioterapia',
        description: 'Exerc√≠cios de reabilita√ß√£o',
        days: [
          { dayNumber: 1, tasks: [
            { title: 'Aquecimento', description: 'Exerc√≠cios de aquecimento', order: 1 },
            { title: 'Alongamento', description: 'Alongar m√∫sculos espec√≠ficos', order: 2 }
          ]},
          { dayNumber: 2, tasks: [
            { title: 'Fortalecimento', description: 'Exerc√≠cios de fortalecimento', order: 1 },
            { title: 'Relaxamento', description: 'T√©cnicas de relaxamento', order: 2 }
          ]}
        ]
      },
      {
        name: 'Protocolo Pr√©-Natal',
        description: 'Acompanhamento durante a gravidez',
        days: [
          { dayNumber: 1, tasks: [
            { title: 'Vitaminas', description: 'Tomar √°cido f√≥lico e vitaminas', order: 1 },
            { title: 'Exames', description: 'Realizar exames de rotina', order: 2 }
          ]},
          { dayNumber: 2, tasks: [
            { title: 'Consultas', description: 'Consultas mensais', order: 1 },
            { title: 'Exerc√≠cios', description: 'Exerc√≠cios para gestantes', order: 2 }
          ]}
        ]
      }
    ];
    
    // Cursos base para criar
    const courseTemplates = [
      {
        name: 'Curso de Alimenta√ß√£o Saud√°vel',
        description: 'Aprenda a ter uma alimenta√ß√£o equilibrada',
        modules: [
          {
            name: 'Introdu√ß√£o √† Nutri√ß√£o',
            description: 'Conceitos b√°sicos de nutri√ß√£o',
            order: 1,
            lessons: [
              { title: 'O que s√£o macronutrientes', content: 'Carboidratos, prote√≠nas e gorduras s√£o os macronutrientes essenciais...', order: 1 },
              { title: 'Micronutrientes essenciais', content: 'Vitaminas e minerais s√£o fundamentais para o bom funcionamento...', order: 2 }
            ]
          },
          {
            name: 'Planejamento de Refei√ß√µes',
            description: 'Como planejar suas refei√ß√µes',
            order: 2,
            lessons: [
              { title: 'Montando um prato equilibrado', content: 'Um prato equilibrado deve conter 50% de vegetais...', order: 1 },
              { title: 'Receitas saud√°veis', content: 'Aqui est√£o algumas receitas pr√°ticas e nutritivas...', order: 2 }
            ]
          }
        ]
      },
      {
        name: 'Curso de Exerc√≠cios em Casa',
        description: 'Exerc√≠cios que voc√™ pode fazer em casa',
        modules: [
          {
            name: 'Exerc√≠cios B√°sicos',
            description: 'Exerc√≠cios para iniciantes',
            order: 1,
            lessons: [
              { title: 'Aquecimento', content: 'Sempre aque√ßa antes de exercitar-se...', order: 1 },
              { title: 'Exerc√≠cios cardio', content: 'Exerc√≠cios cardiovasculares melhoram a sa√∫de do cora√ß√£o...', order: 2 }
            ]
          },
          {
            name: 'Fortalecimento',
            description: 'Exerc√≠cios de fortalecimento muscular',
            order: 2,
            lessons: [
              { title: 'Exerc√≠cios para bra√ßos', content: 'Flex√µes e exerc√≠cios com peso corporal...', order: 1 },
              { title: 'Exerc√≠cios para pernas', content: 'Agachamentos e afundos s√£o excelentes...', order: 2 }
            ]
          }
        ]
      },
      {
        name: 'Curso de Controle do Estresse',
        description: 'T√©cnicas para gerenciar o estresse',
        modules: [
          {
            name: 'Entendendo o Estresse',
            description: 'O que √© estresse e como nos afeta',
            order: 1,
            lessons: [
              { title: 'Tipos de estresse', content: 'Estresse agudo √© tempor√°rio, estresse cr√¥nico √© prolongado...', order: 1 },
              { title: 'Sintomas do estresse', content: 'Ansiedade, irritabilidade, fadiga s√£o sinais comuns...', order: 2 }
            ]
          },
          {
            name: 'T√©cnicas de Relaxamento',
            description: 'M√©todos para relaxar',
            order: 2,
            lessons: [
              { title: 'Respira√ß√£o profunda', content: 'Inspire pelo nariz por 4 segundos, segure por 4...', order: 1 },
              { title: 'Medita√ß√£o b√°sica', content: 'Encontre um local silencioso e concentre-se na respira√ß√£o...', order: 2 }
            ]
          }
        ]
      }
    ];
    
    console.log('üè• Criando protocolos...');
    
    // Criar protocolos para cada m√©dico
    const createdProtocols = [];
    for (let i = 0; i < doctors.length; i++) {
      const doctor = doctors[i];
      const protocolTemplate = protocolTemplates[i % protocolTemplates.length];
      
      const protocol = await prisma.protocol.create({
        data: {
          name: protocolTemplate.name,
          description: protocolTemplate.description,
          doctorId: doctor.id,
          isActive: true
        }
      });
      
      // Criar dias e tarefas do protocolo
      for (const dayTemplate of protocolTemplate.days) {
        const protocolDay = await prisma.protocolDay.create({
          data: {
            dayNumber: dayTemplate.dayNumber,
            protocolId: protocol.id
          }
        });
        
        for (const task of dayTemplate.tasks) {
          await prisma.protocolTask.create({
            data: {
              title: task.title,
              description: task.description,
              order: task.order,
              protocolDayId: protocolDay.id
            }
          });
        }
      }
      
      createdProtocols.push(protocol);
      console.log(`‚úÖ Protocolo "${protocol.name}" criado para ${doctor.name}`);
    }
    
    console.log('üìö Criando cursos...');
    
    // Criar cursos para cada m√©dico
    const createdCourses = [];
    for (let i = 0; i < doctors.length; i++) {
      const doctor = doctors[i];
      const courseTemplate = courseTemplates[i % courseTemplates.length];
      
      const course = await prisma.course.create({
        data: {
          name: courseTemplate.name,
          description: courseTemplate.description,
          doctorId: doctor.id
        }
      });
      
      // Criar m√≥dulos e li√ß√µes
      for (const moduleTemplate of courseTemplate.modules) {
        const module = await prisma.module.create({
          data: {
            name: moduleTemplate.name,
            description: moduleTemplate.description,
            order: moduleTemplate.order,
            courseId: course.id
          }
        });
        
        for (const lessonTemplate of moduleTemplate.lessons) {
          await prisma.lesson.create({
            data: {
              title: lessonTemplate.title,
              content: lessonTemplate.content,
              order: lessonTemplate.order,
              courseId: course.id,
              moduleId: module.id
            }
          });
        }
      }
      
      createdCourses.push(course);
      console.log(`‚úÖ Curso "${course.name}" criado para ${doctor.name}`);
    }
    
    console.log('üë• Atribuindo protocolos e cursos aos pacientes...');
    
    // Atribuir protocolos e cursos aos pacientes
    for (const patient of patients) {
      // Escolher protocolo aleat√≥rio
      const randomProtocol = createdProtocols[Math.floor(Math.random() * createdProtocols.length)];
      
      // Atribuir protocolo ao paciente
      const startDate = new Date();
      const endDate = new Date();
      endDate.setDate(startDate.getDate() + 30); // 30 dias padr√£o
      
      await prisma.userProtocol.create({
        data: {
          userId: patient.id,
          protocolId: randomProtocol.id,
          startDate: startDate,
          endDate: endDate,
          status: 'ACTIVE'
        }
      });
      
      // Escolher curso aleat√≥rio
      const randomCourse = createdCourses[Math.floor(Math.random() * createdCourses.length)];
      
      // Inscrever paciente no curso
      await prisma.userCourse.create({
        data: {
          userId: patient.id,
          courseId: randomCourse.id,
          status: 'active',
          startDate: new Date()
        }
      });
      
      console.log(`‚úÖ Paciente ${patient.name} recebeu protocolo "${randomProtocol.name}" e curso "${randomCourse.name}"`);
    }
    
    console.log(`\nüéâ Processo conclu√≠do!`);
    console.log(`üìã ${createdProtocols.length} protocolos criados`);
    console.log(`üìö ${createdCourses.length} cursos criados`);
    console.log(`üë• ${patients.length} pacientes receberam protocolos e cursos`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createProtocolsAndCourses(); 